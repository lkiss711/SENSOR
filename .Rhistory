# Szenzoralapú adatgyűjtés
# Kiss László
# 2018.12.27
energy_data <- read.csv("energydata_complete.csv")
# View(energy_data)
energy_data$date <- strptime(as.character(energy_data$date),format="%Y-%m-%d %H:%M:%S")
energy_data$date <- as.POSIXct(energy_data$date,tz = "UTC")
class(energy_data$date)
str(energy_data)
names(energy_data)
# save.image(file="Results_prediction.RData")
load("Results_prediction.RData")
# Loading libraries
library(rpart)              # CART algorithm for decision trees
library(partykit)           # Plotting trees
library(gbm)                  # Boosting algorithms
library(doParallel)     # parallel processing
library(pROC)                 # plot the ROC curve
library(corrplot)
library(psych)
library(Hmisc)
library(lubridate)
###
# names(energy_data)
second_day <- function(x) {
# x is an object in posixct format
s <- hour(x)*3600+minute(x)*60+second(x)
}
weekend_weekday <- function(x) {
val <- weekdays(x)
if (val == "Saturday" | val == "Sunday") {
val2 = "Weekend"
}
else {
val2= "Weekday"
}
return(val2)
}
energy_data$NSM <- second_day(energy_data$date)
energy_data$WeekStatus <- unlist(lapply(energy_data$date,weekend_weekday))
energy_data$Day_of_week <-weekdays(energy_data$date)
unique(energy_data$WeekStatus)
unique(energy_data$Day_of_week)
class(energy_data$Day_of_week)
energy_data$Day_of_week <-as.factor(energy_data$Day_of_week)
energy_data$WeekStatus <- as.factor(energy_data$WeekStatus)
str(energy_data)
dim(energy_data)
names(energy_data)
require(gridExtra)
plot1 <-qplot(energy_data$date,energy_data$Appliances,xlab='Time',ylab='Appliances Wh',geom="line")+theme_grey(base_size = 18)
plot1
plot2 <-qplot(energy_data$date[1:1008],energy_data$Appliances[1:1008],xlab='Time (1 week)',ylab='Appliances Wh',geom="line")+theme_grey(base_size = 18)
plot2
energy_data$my <- floor_date(energy_data$date,"month")
energy_data$mhr <- floor_date(energy_data$date,"hour")
library(plyr)
energy_data_Total_per_hour <-  ddply(energy_data, "mhr", summarise,
Appliances=sum(Appliances))
energy_data_Total_per_hour
energy_data_Total_per_hour$Day_week <- wday(energy_data_Total_per_hour$mhr,label=TRUE)
head(energy_data_Total_per_hour)
class(energy_data_Total_per_hour)
summary(energy_data_Total_per_hour)
energy_data_Total_per_hour_na_removed <- na.omit(energy_data_Total_per_hour)
dim(energy_data_Total_per_hour)
names(energy_data_Total_per_hour)
dim(energy_data_Total_per_hour_na_removed)
names(energy_data_Total_per_hour_na_removed)
summary(energy_data_Total_per_hour_na_removed)
# getting now the week of the year
energy_data_Total_per_hour_na_removed$week_year <- week(energy_data_Total_per_hour_na_removed$mhr)
head(energy_data_Total_per_hour_na_removed)
unique(energy_data_Total_per_hour_na_removed$week_year)
energy_data_Total_per_hour_na_removed_w1 <- energy_data_Total_per_hour_na_removed[energy_data_Total_per_hour_na_removed$week_year ==3,]
energy_data_Total_per_hour_na_removed_w1
energy_data_Total_per_hour_na_removed_w1$Hour <- hour(energy_data_Total_per_hour_na_removed_w1$mhr)
names(energy_data_Total_per_hour_na_removed_w1)
library(ggplot2)
library(lubridate)
# "mhr"        "Appliances" "Day_week"   "week_year" "Hour"
gg1 <-ggplot(energy_data_Total_per_hour_na_removed_w1,aes(x=Day_week,y=Hour,
fill=Appliances))
gg1
min(energy_data_Total_per_hour_na_removed_w1$Appliances)
# 190
max(energy_data_Total_per_hour_na_removed_w1$Appliances)
gg1 <- gg1 + geom_tile(color="white", size=0.50)+scale_fill_gradient(low="yellow", high="red",limit=c(150,3800))
gg1
#gg1 <- gg1 +scale_fill_viridis(name="Appliances energy",option="A")
#gg <- gg +scale_y_continuous(breaks=seq(0,23,1),trans="reverse")
gg1 <- gg1 +scale_y_continuous(breaks=seq(0,23,1))
gg1
gg1 <- gg1 + coord_equal()
gg1
gg1 <- gg1 + labs(x="Day of Week", y="hour of day")#, title="Appliances energy consumption")
gg1 <- gg1 + theme_tufte(base_family="Helvetica")
gg1 <- gg1 + theme(plot.title=element_text(hjust=0))
gg1 <- gg1 + theme(axis.ticks=element_blank())
gg1 <- gg1 + theme(axis.text=element_text(size=9))
gg1 <- gg1 + theme(legend.title=element_text(size=9))
gg1 <- gg1 + theme(legend.text=element_text(size=9))
gg1
Total_per_hour_na_removed_w2 <- energy_data_Total_per_hour_na_removed[energy_data_Total_per_hour_na_removed$week_year ==4,]
Total_per_hour_na_removed_w2
Total_per_hour_na_removed_w2$Hour <- hour(Total_per_hour_na_removed_w2$mhr)
names(Total_per_hour_na_removed_w2)
gg2 <-ggplot(Total_per_hour_na_removed_w2,aes(x=Day_week,y=Hour,fill=Appliances))
min(Total_per_hour_na_removed_w2$Appliances)
max(Total_per_hour_na_removed_w2$Appliances)
gg2 <- gg2 + geom_tile(color="white", size=0.50) + scale_fill_gradient(low="yellow", high="red",limit=c(150,3800))
gg2
#library(viridis)
library(ggthemes)
#gg2 <- gg2 +scale_fill_viridis(name="Appliances energy", option="A")
#gg <- gg +scale_y_continuous(breaks=seq(0,23,1),trans="reverse")
gg2 <- gg2 +scale_y_continuous(breaks=seq(0,23,1))
gg2 <- gg2 + coord_equal()
gg2 <- gg2 + labs(x="Day of Week", y="hour of day")#, title="Appliances energy consumption")
gg2 <- gg2 + theme_tufte(base_family="Helvetica")
gg2 <- gg2 + theme(plot.title=element_text(hjust=0))
gg2 <- gg2 + theme(axis.ticks=element_blank())
gg2 <- gg2 + theme(axis.text=element_text(size=9))
gg2 <- gg2 + theme(legend.title=element_text(size=9))
gg2 <- gg2 + theme(legend.text=element_text(size=9))
gg2
# Szenzoralapú adatgyűjtés
# Kiss László
# 2018.12.27
# Adathalmaz előkészítése
energy_data <- read.csv("energydata_complete.csv")
# View(energy_data)
energy_data$date <- strptime(as.character(energy_data$date),format="%Y-%m-%d %H:%M:%S")
energy_data$date <- as.POSIXct(energy_data$date,tz = "UTC")
class(energy_data$date)
str(energy_data)
names(energy_data)
# save.image(file="Results_prediction.RData")
load("Results_prediction.RData")
# Loading libraries
library(rpart)              # CART algorithm for decision trees
library(partykit)           # Plotting trees
library(gbm)                  # Boosting algorithms
library(doParallel)     # parallel processing
library(pROC)                 # plot the ROC curve
library(corrplot)
library(psych)
library(Hmisc)
library(lubridate)
###
# names(energy_data)
second_day <- function(x) {
# x is an object in posixct format
s <- hour(x)*3600+minute(x)*60+second(x)
}
weekend_weekday <- function(x) {
val <- weekdays(x)
if (val == "Saturday" | val == "Sunday") {
val2 = "Weekend"
}
else {
val2= "Weekday"
}
return(val2)
}
energy_data$NSM <- second_day(energy_data$date)
energy_data$WeekStatus <- unlist(lapply(energy_data$date,weekend_weekday))
energy_data$Day_of_week <-weekdays(energy_data$date)
unique(energy_data$WeekStatus)
unique(energy_data$Day_of_week)
class(energy_data$Day_of_week)
energy_data$Day_of_week <-as.factor(energy_data$Day_of_week)
energy_data$WeekStatus <- as.factor(energy_data$WeekStatus)
str(energy_data)
dim(energy_data)
names(energy_data)
# Alapdiagramok
require(gridExtra)
plot1 <-qplot(energy_data$date,energy_data$Appliances,xlab='Time',ylab='Appliances Wh',geom="line")+theme_grey(base_size = 18)
plot1
plot2 <-qplot(energy_data$date[1:1008],energy_data$Appliances[1:1008],xlab='Time (1 week)',ylab='Appliances Wh',geom="line")+theme_grey(base_size = 18)
plot2
# Heatmap diagram
energy_data$my <- floor_date(energy_data$date,"month")
energy_data$mhr <- floor_date(energy_data$date,"hour")
library(plyr)
energy_data_Total_per_hour <-  ddply(energy_data, "mhr", summarise,
Appliances=sum(Appliances))
energy_data_Total_per_hour
energy_data_Total_per_hour$Day_week <- wday(energy_data_Total_per_hour$mhr,label=TRUE)
head(energy_data_Total_per_hour)
class(energy_data_Total_per_hour)
summary(energy_data_Total_per_hour)
energy_data_Total_per_hour_na_removed <- na.omit(energy_data_Total_per_hour)
dim(energy_data_Total_per_hour)
names(energy_data_Total_per_hour)
dim(energy_data_Total_per_hour_na_removed)
names(energy_data_Total_per_hour_na_removed)
summary(energy_data_Total_per_hour_na_removed)
# getting now the week of the year
energy_data_Total_per_hour_na_removed$week_year <- week(energy_data_Total_per_hour_na_removed$mhr)
head(energy_data_Total_per_hour_na_removed)
unique(energy_data_Total_per_hour_na_removed$week_year)
# [1]  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22
# first week only
energy_data_Total_per_hour_na_removed_w1 <- energy_data_Total_per_hour_na_removed[energy_data_Total_per_hour_na_removed$week_year ==3,]
energy_data_Total_per_hour_na_removed_w1
energy_data_Total_per_hour_na_removed_w1$Hour <- hour(energy_data_Total_per_hour_na_removed_w1$mhr)
names(energy_data_Total_per_hour_na_removed_w1)
library(ggplot2)
library(lubridate)
# "mhr"        "Appliances" "Day_week"   "week_year" "Hour"
gg1 <-ggplot(energy_data_Total_per_hour_na_removed_w1,aes(x=Day_week,y=Hour,
fill=Appliances))
# gg1
min(energy_data_Total_per_hour_na_removed_w1$Appliances)
# 190
max(energy_data_Total_per_hour_na_removed_w1$Appliances)
gg1 <- gg1 + geom_tile(color="white", size=0.50)+scale_fill_gradient(low="yellow", high="red",limit=c(150,3800))
gg1
library(viridis)
library(ggthemes)
#gg1 <- gg1 +scale_fill_viridis(name="Appliances energy",option="A")
#gg <- gg +scale_y_continuous(breaks=seq(0,23,1),trans="reverse")
gg1 <- gg1 +scale_y_continuous(breaks=seq(0,23,1))
gg1
gg1 <- gg1 + coord_equal()
gg1
gg1 <- gg1 + labs(x="Day of Week", y="hour of day")#, title="Appliances energy consumption")
gg1 <- gg1 + theme_tufte(base_family="Helvetica")
gg1 <- gg1 + theme(plot.title=element_text(hjust=0))
gg1 <- gg1 + theme(axis.ticks=element_blank())
gg1 <- gg1 + theme(axis.text=element_text(size=9))
gg1 <- gg1 + theme(legend.title=element_text(size=9))
gg1 <- gg1 + theme(legend.text=element_text(size=9))
gg1
Total_per_hour_na_removed_w2 <- energy_data_Total_per_hour_na_removed[energy_data_Total_per_hour_na_removed$week_year ==4,]
Total_per_hour_na_removed_w2
Total_per_hour_na_removed_w2$Hour <- hour(Total_per_hour_na_removed_w2$mhr)
names(Total_per_hour_na_removed_w2)
gg2 <-ggplot(Total_per_hour_na_removed_w2,aes(x=Day_week,y=Hour,fill=Appliances))
min(Total_per_hour_na_removed_w2$Appliances)
#170
max(Total_per_hour_na_removed_w2$Appliances)
#3650
gg2 <- gg2 + geom_tile(color="white", size=0.50) + scale_fill_gradient(low="yellow", high="red",limit=c(150,3800))
gg2
#library(viridis)
library(ggthemes)
gg2 <- gg2 +scale_y_continuous(breaks=seq(0,23,1))
gg2 <- gg2 + coord_equal()
gg2 <- gg2 + labs(x="Day of Week", y="hour of day")#, title="Appliances energy consumption")
gg2 <- gg2 + theme_tufte(base_family="Helvetica")
gg2 <- gg2 + theme(plot.title=element_text(hjust=0))
gg2 <- gg2 + theme(axis.ticks=element_blank())
gg2 <- gg2 + theme(axis.text=element_text(size=9))
gg2 <- gg2 + theme(legend.title=element_text(size=9))
gg2 <- gg2 + theme(legend.text=element_text(size=9))
gg2
# Szenzoralapú adatgyűjtés
# Kiss László
# 2018.12.27
# Adathalmaz előkészítése
energy_data <- read.csv("energydata_complete.csv")
# View(energy_data)
energy_data$date <- strptime(as.character(energy_data$date),format="%Y-%m-%d %H:%M:%S")
energy_data$date <- as.POSIXct(energy_data$date,tz = "UTC")
class(energy_data$date)
str(energy_data)
names(energy_data)
# save.image(file="Results_prediction.RData")
load("Results_prediction.RData")
# Loading libraries
library(rpart)              # CART algorithm for decision trees
library(partykit)           # Plotting trees
library(gbm)                  # Boosting algorithms
library(doParallel)     # parallel processing
library(pROC)                 # plot the ROC curve
library(corrplot)
library(psych)
library(Hmisc)
library(lubridate)
###
# names(energy_data)
second_day <- function(x) {
# x is an object in posixct format
s <- hour(x)*3600+minute(x)*60+second(x)
}
weekend_weekday <- function(x) {
val <- weekdays(x)
if (val == "Saturday" | val == "Sunday") {
val2 = "Weekend"
}
else {
val2= "Weekday"
}
return(val2)
}
energy_data$NSM <- second_day(energy_data$date)
energy_data$WeekStatus <- unlist(lapply(energy_data$date,weekend_weekday))
energy_data$Day_of_week <-weekdays(energy_data$date)
unique(energy_data$WeekStatus)
unique(energy_data$Day_of_week)
class(energy_data$Day_of_week)
energy_data$Day_of_week <-as.factor(energy_data$Day_of_week)
energy_data$WeekStatus <- as.factor(energy_data$WeekStatus)
str(energy_data)
dim(energy_data)
names(energy_data)
# Alapdiagramok
require(gridExtra)
plot1 <-qplot(energy_data$date,energy_data$Appliances,xlab='Time',ylab='Appliances Wh',geom="line")+theme_grey(base_size = 18)
plot1
plot2 <-qplot(energy_data$date[1:1008],energy_data$Appliances[1:1008],xlab='Time (1 week)',ylab='Appliances Wh',geom="line")+theme_grey(base_size = 18)
plot2
# Heatmap diagram
energy_data$my <- floor_date(energy_data$date,"month")
energy_data$mhr <- floor_date(energy_data$date,"hour")
library(plyr)
energy_data_Total_per_hour <-  ddply(energy_data, "mhr", summarise,
Appliances=sum(Appliances))
energy_data_Total_per_hour
energy_data_Total_per_hour$Day_week <- wday(energy_data_Total_per_hour$mhr,label=TRUE)
head(energy_data_Total_per_hour)
class(energy_data_Total_per_hour)
summary(energy_data_Total_per_hour)
energy_data_Total_per_hour_na_removed <- na.omit(energy_data_Total_per_hour)
dim(energy_data_Total_per_hour)
names(energy_data_Total_per_hour)
dim(energy_data_Total_per_hour_na_removed)
names(energy_data_Total_per_hour_na_removed)
summary(energy_data_Total_per_hour_na_removed)
# getting now the week of the year
energy_data_Total_per_hour_na_removed$week_year <- week(energy_data_Total_per_hour_na_removed$mhr)
head(energy_data_Total_per_hour_na_removed)
unique(energy_data_Total_per_hour_na_removed$week_year)
# [1]  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22
# first week only
energy_data_Total_per_hour_na_removed_w1 <- energy_data_Total_per_hour_na_removed[energy_data_Total_per_hour_na_removed$week_year ==3,]
energy_data_Total_per_hour_na_removed_w1
energy_data_Total_per_hour_na_removed_w1$Hour <- hour(energy_data_Total_per_hour_na_removed_w1$mhr)
names(energy_data_Total_per_hour_na_removed_w1)
library(ggplot2)
library(lubridate)
# "mhr"        "Appliances" "Day_week"   "week_year" "Hour"
gg1 <-ggplot(energy_data_Total_per_hour_na_removed_w1,aes(x=Day_week,y=Hour,
fill=Appliances))
# gg1
min(energy_data_Total_per_hour_na_removed_w1$Appliances)
# 190
max(energy_data_Total_per_hour_na_removed_w1$Appliances)
gg1 <- gg1 + geom_tile(color="white", size=0.50)+scale_fill_gradient(low="yellow", high="red",limit=c(150,3800))
gg1
library(viridis)
library(ggthemes)
#gg1 <- gg1 +scale_fill_viridis(name="Appliances energy",option="A")
#gg <- gg +scale_y_continuous(breaks=seq(0,23,1),trans="reverse")
gg1 <- gg1 +scale_y_continuous(breaks=seq(0,23,1))
gg1
gg1 <- gg1 + coord_equal()
gg1
gg1 <- gg1 + labs(x="Day of Week", y="hour of day")#, title="Appliances energy consumption")
gg1 <- gg1 + theme_tufte(base_family="Helvetica")
gg1 <- gg1 + theme(plot.title=element_text(hjust=0))
gg1 <- gg1 + theme(axis.ticks=element_blank())
gg1 <- gg1 + theme(axis.text=element_text(size=9))
gg1 <- gg1 + theme(legend.title=element_text(size=9))
gg1 <- gg1 + theme(legend.text=element_text(size=9))
gg1
Total_per_hour_na_removed_w2 <- energy_data_Total_per_hour_na_removed[energy_data_Total_per_hour_na_removed$week_year ==4,]
Total_per_hour_na_removed_w2
Total_per_hour_na_removed_w2$Hour <- hour(Total_per_hour_na_removed_w2$mhr)
names(Total_per_hour_na_removed_w2)
gg2 <-ggplot(Total_per_hour_na_removed_w2,aes(x=Day_week,y=Hour,fill=Appliances))
min(Total_per_hour_na_removed_w2$Appliances)
#170
max(Total_per_hour_na_removed_w2$Appliances)
#3650
gg2 <- gg2 + geom_tile(color="white", size=0.50) + scale_fill_gradient(low="yellow", high="red",limit=c(150,3800))
gg2
#library(viridis)
library(ggthemes)
gg2 <- gg2 +scale_y_continuous(breaks=seq(0,23,1))
gg2 <- gg2 + coord_equal()
gg2 <- gg2 + labs(x="Day of Week", y="hour of day")#, title="Appliances energy consumption")
gg2 <- gg2 + theme_tufte(base_family="Helvetica")
gg2 <- gg2 + theme(plot.title=element_text(hjust=0))
gg2 <- gg2 + theme(axis.ticks=element_blank())
gg2 <- gg2 + theme(axis.text=element_text(size=9))
gg2 <- gg2 + theme(legend.title=element_text(size=9))
gg2 <- gg2 + theme(legend.text=element_text(size=9))
gg2
# Reading the training data
energy_data$my <- NULL
energy_data$mhr <- NULL
names(energy_data)
library(caret)
set.seed(1)
train_index <- createDataPartition(energy_data$Appliances,p=0.75,list=FALSE)
train_data <- energy_data[train_index,]
dim(train_data)
names(train_data)
# Saving training data in csv format
write.table(format(train_data, digits=19),file = "training.csv", sep = ",", row.names=FALSE)
# checkin if the two training (objects) files are the same afer saving
train_data2 <- read.csv("training.csv")
#View(energy_data)
train_data2$date <- strptime(as.character(train_data2$date),format="%Y-%m-%d %H:%M:%S")
train_data2$date <- as.POSIXct(train_data2$date,tz = "UTC")
class(train_data2$date)
str(train_data2)
#all(train_data ==train_data2) # TRUE
## they are the same
train_data <-train_data2
# creating the testing set here
test_data <- energy_data[-train_index,]
dim(test_data)
# 4932,32
# Saving testing data in csv format
write.table(format(test_data, digits=19),file = "testing.csv", sep = ",", row.names=FALSE)
testing2 <- read.csv("testing.csv")
testing2$date <- strptime(as.character(testing2$date),format="%Y-%m-%d %H:%M:%S")
testing2$date <- as.POSIXct(testing2$date,tz = "UTC")
# checking to see if the testings files (objects) are the same
all(testing2==test_data)
# TRUE
# #
png('firstpairsplot_train_set_Jan29.png',width = 10, height = 10, units = 'in', res = 300)
pairs.panels(train_data[,c(2, 3, 4, 5, 6, 7, 8, 9)],lm=TRUE,
ellipses = FALSE,rug=FALSE,scale=FALSE,
cex.cor=1.1,cex.labels=1.7, cex.axis=1.7)
dev.off()
rcorr(as.matrix(train_data2[,c(2, 3, 4, 5, 6, 7, 8, 9)]))
# Second pairs plot
png('secondpairsplot_train_set_Jan29.png',width = 10, height = 10, units = 'in', res = 300)
pairs.panels(train_data2[,c(2,10,11,12,13,14,15)],lm=TRUE,ellipses = FALSE,rug=FALSE,scale=FALSE,
cex.cor=1.1,cex.labels=1.7, cex.axis=1.7)
dev.off()
rcorr(as.matrix(train_data2[,c(2,10,11,12,13,14,15)]))
# Third pairs plot
png('thirdpairsplot_train_set_Jan29.png',width = 10, height = 10, units = 'in', res = 300)
pairs.panels(train_data2[,c(2,16,17,18,19,20,21)],lm=TRUE,ellipses = FALSE,rug=FALSE,scale=FALSE,
cex.cor=1.1,cex.labels=1.7, cex.axis=1.7)
dev.off()
rcorr(as.matrix(train_data2[,c(2,16,17,18,19,20,21)]))
# Fourth pairs plot
png('fourthpairsplot_train_set_Jan29.png',width = 10, height = 10, units = 'in', res = 300)
pairs.panels(train_data2[,c(2,22,23,24,25,26,27,30,14)],lm=TRUE,ellipses = FALSE,rug=FALSE,scale=FALSE,
cex.cor=1.1,cex.labels=1.7, cex.axis=1.7)
dev.off()
rcorr(as.matrix(train_data2[,c(2,22,23,24,25,26,27,30,14)]))
names(train_data2)
# Restarting R here
.rs.restartR()
# Feature selection with Boruta
library(Boruta)
dim(train_data)
names(train_data[,c(2:32)])
str(train_data[,c(2:32)])
# Running Boruta in a smaller training subset for speed
set.seed(1234)
train_data_ss<- train_data[,c(2:32)][sample(1:nrow(train_data), 4440,
replace=FALSE),]
dim(train_data_ss)
set.seed(1234)
Boruta.Appliances_ss    <- Boruta(Appliances~., data=train_data_ss,  doTrace = 2,ntree = 115)
